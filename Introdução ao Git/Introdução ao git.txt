Baixe o git no link https://git-scm.com/

Pricipais comandos:

ajuda
git help

Comando específico
git help add
git help commit
git help <qualquer_comando_git>

Configuração
As configurações do GIT são armazenadas no arquivo .gitconfig localizado dentro do diretório do usuário do Sistema Operacional (Ex.: Windows: C:\Users\Documents and Settings\Leonardo ou *nix /home/leonardo).

As configurações realizadas através dos comandos abaixo serão incluídas no arquivo citado acima.

Definir usuário
git config --global user.name "Leonardo Comelli"
Definir e-mail
git config --global user.email leonardo@software-ltda.com.br

Editor de configurações
git config --global core.editor vim

Setar ferramenta de mesclagem
git config --global merge.tool vimdiff

Setar arquivos a serem ignorados
git config --global core.excludesfile ~/.gitignore

Listar configurações
git config --list

Ignorar Arquivos
Os nomes de arquivos/diretórios ou extensões de arquivos listados no arquivo .gitignore não serão adicionados em um repositório. Existem dois arquivos .gitignore, são eles:

Geral: normalmente armazenado no diretório do usuário do Sistema Operacional. O arquivo que possui a lista de arquivos/diretórios a serem ignorados por todos os repositórios deve ser informado conforme mencionado acima. O arquivo não precisa ter o nome de .gitignore .

Por repositório: Deve ser armazenado no diretório do repositório e deve conter a lista dos arquivos/diretórios que devem ser ignorados apenas para o repositório específico.

Repositório Local
Criar novo repositório
git init

Verifique o estado dos arquivos/diretórios
git status

Adicionar arquivo/diretório (área de teste)
Adicionar um arquivo em específico
git add meu_arquivo.txt

Adicionar um diretório em específico
git add meu_diretorio

Adicionar todos os arquivos/diretórios
git add .	

Adicione um arquivo que está listado no .gitignore (geral ou do repositório)
git add -f arquivo_no_gitignore.txt

Comitar arquivo/diretório
Comitar um arquivo
git commit meu_arquivo.txt

Comitar vários arquivos
git commit meu_arquivo.txt meu_outro_arquivo.txt

Comitar informando mensagem
git commit meuarquivo.txt -m "minha mensagem de commit"

Remover arquivo/diretório
Remover arquivo
git rm meu_arquivo.txt
diretório removedor
git rm -r diretorio

Visualizar histórico
Exibir histórico
git log

Exibir histórico com diff das duas últimas alterações
git log -p -2

Exibir resumo do histórico (hash completo, autor, data, comentário e qtde de alterações (+/-))
git log --stat

Exibir informações resumidas em uma linha (hash completa e comentário)
git log --pretty=oneline

Exibir histórico com formatação específica (hash abreviada, autor, data e comentário)
git log --pretty=format:"%h - %an, %ar : %s"
%h: Abreviação do hash;
%an: Nome do autor;
%ar: Dados;
%s: Comentário.
Verifique as demais opções de formatação no Git Book

Exibir histórico de um arquivo específico
git log -- <caminho_do_arquivo>
Exibir histórico de um arquivo específico que contém uma determinada palavra
git log --summary -S<palavra> [<caminho_do_arquivo>]
Exibir histórico alterado de um arquivo
git log --diff-filter=M -- <caminho_do_arquivo>
O pode ser substituído por: Postado (A), Copiado (C), Apagado (D), Modificado (M), Renomeado (R), entre outros.
Exibir histórico de um determinado autor
git log --author=usuario
Exibir revisão e autor da última modificação de um bloco de linhas
git blame -L 12,22 meu_arquivo.txt 
Desfazendo operações
Desfazendo alterar local (diretório de trabalho)
Este comando deve ser utilizado enquanto o arquivo não foi adicionado na área de preparação .

git checkout -- meu_arquivo.txt
Desfazendo alteração local (staging area)
Este comando deve ser utilizado quando o arquivo já foi adicionado na área staged .

git reset HEAD meu_arquivo.txt
Se o resultado abaixo for exibido, o comando reset não altera o diretório de trabalho.

Unstaged changes after reset:
M	meu_arquivo.txt
A alteração do diretório pode ser realizada através do comando abaixo:

git checkout meu_arquivo.txt
Repositório Remoto
Exibir os repositórios remotos
git remote

git remote -v
Vincular repositório local com um repositório remoto
git remote add origin git@github.com:leocomelli/curso-git.git
Exibir informações dos repositórios remotos
git remote show origin
Renomear um repositório remoto
git remote rename origin curso-git
Desvincular um repositório remoto
git remote rm curso-git
Enviar arquivos/diretórios para o repositório remoto
O primeiro push de um repositório deve conter o nome do repositório remoto e a filial.

git push -u origin master
Os demais pushes não precisam dessa informação

git push
Atualizar repositório local de acordo com o repositório remoto
Atualizar os arquivos no branch atual

git pull
Buscar as alterações, mas não se aplica-las no ramo atual
git fetch

Clonar um repositório remoto já existente
git clone git@github.com:leocomelli/curso-git.git

Tag
Criando uma tag leve
git tag vs-1.1

Criando uma tag anotada
git tag -a vs-1.1 -m "Minha versão 1.1"

Criando uma tag assinada
Para criar uma tag assinada é necessária uma chave privada (GNU Privacy Guard - GPG).

git tag -s vs-1.1 -m "Minha tag assinada 1.1"

Criando tag a partir de um commit (hash)
git tag -a vs-1.2 9fceb02

Criando tags no repositório remoto
git push origin vs-1.2

Criando todas as tags locais no repositório remoto
git push origin --tags

Galhos
O master é o branch principal do GIT.

O HEAD é um ponteiro especial que indica qual é o ramo atual. Por padrão, o HEAD aponta para o branch principal, o master .

Criando uma nova filial
git branch bug-123

Trocando para um ramal existente
git checkout bug-123
Neste caso, o ponteiro principal HEAD esta apontado para o branch chamado bug-123.

Criar um novo ramo e trocater
git checkout -b bug-456

Voltar para o principal da filial (mestre)
git checkout master

Resolver merge entre os branches
git merge bug-123

Para realizar a fusão , é necessário estar no ramo que receberá as alterações. A mesclagem pode ser automática ou manual. O merge automático será feito em arquivos de texto que não foram alterados nas mesmas linhas, já o merge manual será feito em arquivos de texto que não foram alterados nas mesmas linhas.

A mensagem indicando um manual de mesclagem será:

Automerging meu_arquivo.txt
CONFLICT (content): Merge conflict in meu_arquivo.txt
Automatic merge failed; fix conflicts and then commit the result.
Apagando um ramo
git branch -d bug-123
Ramos de Listar
Ramos de Listar
git branch
Listar branches com informações dos últimos commits
git branch -v
Listar branches que já foram fundidos (merged) com o master
git branch --merged
Listar branches que não foram fundidos (merged) com o master
git branch --no-merged
Criando filiais no repositório remoto
Criando uma filial remota com o mesmo nome
git push origin bug-123
Criando uma filial remota com nome diferente
git push origin bug-123:new-branch
Baixar um branch remoto para edição
git checkout -b bug-123 origin/bug-123
Apagar filial remota
git push origin:bug-123
Rebase
Fazendo o rebase entre um o branch bug-123 e o master.

git checkout experiment

git rebase master
Mais informações e ansiedade sobre o Rebasing

###Esconder

Para alternar entre um ramo e outro é necessário fazer o commit das alterações atuais para depois trocar para um outro ramo. Se existir uma necessidade de realizar a troca sem fazer o commit é possível criar um stash . O Stash como se fosse um branch temporário que contem apenas as alterações ainda não cometidas.

Criar um stash
git stash
Listar esconderijos
git stash list
Voltar para o último stash
git stash apply
Voltar para um estoque específico
git stash apply stash@{2}
Onde 2 é o índice do stash desejado.

Criar uma filial a partir de um stash
git stash branch meu_branch
Reescrevendo o histórico
Alterando mensagens de commit
git commit --amend -m "Minha nova mensagem"
Alterar últimos commits
Alterando os três últimos commits

git rebase -i HEAD~3
O editor de texto será aberto com as linhas representando os três últimos commits.

pick f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added catfile
Altere para editar os commits que deseja realizar alterações.

edit f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added catfile
Feche o editor de texto.

Digite o comando alterar para a mensagem do commit que foi marcado como edit .

git commit –amend -m “Nova mensagem”
Aplique a alteração

git rebase --continue
Atenção: É possível alterar a ordem dos commits ou removedor um commit apenas mudando as linhas ou removendo.

Juntando vários commits
Seguir os mesmos passos acima, porém marque os commtis que devem ser juntos com * squash

Remover todo histórico de um arquivo
git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
Bisseccionar
O bisect (pesquisa binária) é útil para encontrar um commit que está gerando um bug ou uma inconsistência entre uma sequência de commits.

Iniciar pequinsa binária
git bisect start
Marcar o commit atual como ruim
git bisect bad
Marcar o commit de uma tag que esta sem o bug/inconsistência
git bisect good vs-1.1
Marcar o commit como bom
O GIT irá navegar entre os commits para ajudar a identificar o commit que é o problema. Se o commit atual não estiver quebrado, então é necessário marcar-lo como bom .

git bisect good
Marcar o cometer como ruim
Se o commit estiver com o problema, então ele deve ser marcado como ruim .

git bisect bad
Finalizar a pesquisa binária
Depois de encontrar o commit com problema, para retornar para o HEAD utilize:

git bisect reset